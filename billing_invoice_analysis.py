# -*- coding: utf-8 -*-
"""Billing_Invoice_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n662U_Iz__HDd1kjEouEXFgAF-KM_HNP

# üìä Expense Analysis for Office Park Billing  

### **First-Time Data Analytics Project** üöÄ  
Welcome to my **first-ever data analytics project**, where I manually collected and analyzed invoice data for my company (name withheld). This project was driven by a real-world challenge: understanding the **spending and billing trends** that the company was receiving from the **office park where we were renting**. My boss wanted clarity on how we were being billed, so I took on the task of transforming unstructured invoice data into actionable financial insights.  

---

## üèó **Project Overview**  
This project involved converting **EML email files** (containing invoices) into **PDFs**, extracting the relevant financial data **manually**, and entering it into a structured spreadsheet. Once compiled, I performed:  
‚úî **Data Cleaning** ‚Äì Removing inconsistencies and ensuring accuracy  
‚úî **Sorting & Grouping** ‚Äì Categorizing expenses for analysis  
‚úî **Visualization & Trend Identification** ‚Äì Creating clear graphs to showcase spending patterns  

The final report tracks **monthly expenses** across categories such as:  
üîπ **Electricity Usage** ‚Äì Understanding peak months and efficiency shifts  
üîπ **Solar Energy** ‚Äì Tracking sustainability and cost reductions  
üîπ **Rent & Levies** ‚Äì Studying consistency and adjustments  
üîπ **Parking & Training Costs** ‚Äì Identifying stable vs. fluctuating expenses  

This hands-on process introduced me to **data transformation, organization, and visualization**, making it a great learning experience in **data analytics**.  

---

## üîß **Technologies & Tools Used**  
- üêç **Python** ‚Äì Data manipulation (Pandas & NumPy)  
- üìä **Matplotlib & Seaborn** ‚Äì Expense trend visualization  
- üèó **Google Colab** ‚Äì Notebook coding environment  
- üíæ **CSV & Excel** ‚Äì Manual data entry & structuring  
- ‚úâ **EML to PDF Conversion** ‚Äì Extracting invoices from emails  
- üöÄ **GitHub** ‚Äì Version control & project sharing  

---

## üìà **Key Insights & Findings**  
üîπ **Electricity expenses peaked in September 2024**, highlighting seasonal demand changes.  
üîπ **Solar energy costs steadily declined**, indicating improved efficiency.  
üîπ **Rent remained stable**, but a notable increase occurred in March 2025.  
üîπ **Generator & Diesel usage were minimal**, reflecting effective backup strategies.  

Through this analysis, I developed a **better understanding of financial trends**, how to clean messy data, and the importance of visual storytelling in analytics.  

---

## üöÄ **How to Run the Project**  
1Ô∏è‚É£ Clone the repository:
   ```bash
   git clone: https://github.com/DynamicDataMindset/expense-analysis#:~:text=DynamicDataMindset,expense%2Danalysis

# Uploading CSV File here.
"""

from google.colab import files
uploaded = files.upload()

"""# Importing Libraries"""

#Data Handling
import pandas as pd     #For data manipulation and analysis
import numpy as np

#Visualization
import matplotlib.pyplot as plt    #For creating charts and plots
import seaborn as sns    #For enhancing visualizations

# Load the CSV file with the semicolon delimiter
df = pd.read_csv('invoice_dataset_MSquared_Medical.csv', delimiter=';')

# Print the column names to check for any discrepancies
print(df.columns)

"""# convert the CSV file(Uses semicolon as a Delimeter)"""

# Load the CSV file with the comma delimiter
df = pd.read_csv('invoice_dataset_MSquared_Medical.csv', delimiter=',')

# Save the DataFrame to a new CSV file with semicolon delimiter
df.to_csv('invoice_dataset_MSquared_Medical_s.csv', sep=';', index=False)

print("The CSV file has been successfully converted to use semicolon delimiters and saved as 'invoice_dataset_MSquared_Medical_s.csv'.")

"""# Loading Data into a DataFrame"""

# Load the CSV file with the correct delimiter
df = pd.read_csv('invoice_dataset_MSquared_Medical.csv', delimiter=';')

# Preview the columns to ensure they're correctly recognized
print(df.columns)


# Filter data for Solar expenses
solar_data = df[df['Allocation'] == 'Solar']

# Group by Month and calculate the total Inclusive Amount for Solar
solar_totals = solar_data.groupby('Date')['Inclusive Amount'].sum()

# Plot the Solar expenses
solar_totals.plot(kind='bar', color='gold', figsize=(10, 6))
plt.title('Monthly Solar Expenses (Inclusive Amount)')
plt.xlabel('Month')
plt.ylabel('Total Inclusive Amount (R)')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Step 2: Load the Converted CSV File and Check Column Names
df = pd.read_csv('invoice_dataset_MSquared_Medical.csv', delimiter=';')
print(df.columns)

# Step 3: Strip Spaces and Rename Columns if Necessary
df.columns = df.columns.str.strip() # Strip leading/trailing spaces from column names
df.rename(columns={'Invoice No': 'Invoice No', 'Date': 'Date', 'Allocation': 'Allocation',
                   'Exclusive Amount': 'Exclusive Amount', 'VAT': 'VAT', 'Inclusive Amount': 'Inclusive Amount'}, inplace=True)
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
print(df.head())

"""# Adding the Month column for monthly grouping and analysis."""

# Extract the Month from the Date and create a new column
df['Month'] = df['Date'].dt.to_period('M')

# Preview the dataset with the new Month column
print(df.head())

#Group Data by Month and Allocation:
grouped = df.groupby(['Month', 'Allocation'])[['Exclusive Amount', 'VAT', 'Inclusive Amount']].sum()
print(grouped)

"""# Visualize Monthly Totals"""

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

# Filter data for electricity expenses
electricity = df[df['Allocation'] == 'Electricity']

# Group by Month and calculate the total Inclusive Amount
electricity_totals = electricity.groupby('Month')['Inclusive Amount'].sum()

# Plot monthly totals
fig, ax = plt.subplots(figsize=(12, 6))  # Adjust figure size for better spacing
bar_width = 0.7  # Adjust bar width to create space between bars
bars = ax.bar(electricity_totals.index.astype(str), electricity_totals, color='skyblue', width=bar_width)

# Add labels on top of each bar
for bar in bars:
    yval = bar.get_height()
    ax.text(bar.get_x() + bar.get_width()/2, yval, f'R{yval:,.2f}', ha='center', va='bottom', fontsize=9)  # Adjust fontsize if needed

# Customize the chart
ax.set_title('Monthly Electricity Expenses')
ax.set_xlabel('Month')
ax.set_ylabel('Inclusive Amount (R)')
plt.xticks(rotation=45, ha='right')

# Save the chart
plt.tight_layout()
file_name = "Monthly_Electricity_Expenses.png"
plt.savefig(file_name, dpi=300)

# Download the chart
files.download(file_name)

# Show the chart
plt.show()

# Filter data for Electricity expenses
electricity = df[df['Allocation'] == 'Electricity']

# Group by Month and calculate the total Inclusive Amount for each month
electricity_totals = electricity.groupby('Month')['Inclusive Amount'].sum()

# Plot the monthly Electricity expenses
electricity_totals.plot(kind='bar', color='red', figsize=(12, 6))
plt.title('Monthly Electricity Expenses (Inclusive Amount)')
plt.xlabel('Month')
plt.ylabel('Total Inclusive Amount (R)')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Group data by Month and Allocation, summing up the financial columns
grouped_data = df.groupby(['Month', 'Allocation'])[['Inclusive Amount']].sum().reset_index()

# Preview the grouped data
print(grouped_data.head())

"""# THE MAIN BILLING INVOICES ANALYTICS"""

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

# Load the CSV file with the semicolon delimiter
df = pd.read_csv('invoice_dataset_MSquared_Medical.csv', delimiter=';')

# this line fix the KeyError by stripping column names
df.columns = df.columns.str.strip()

# List of unique allocation categories
allocations = grouped_data['Allocation'].unique()

# Looping through each allocation and plot a bar chart
for allocation in allocations:
    # Filter data for the current allocation
    data = grouped_data[grouped_data['Allocation'] == allocation]

    # Sort by month if necessary
    data = data.sort_values('Month')

    # Plot the monthly totals
    plt.figure(figsize=(12, 6))  # Increased figure width for better spacing
    bar_width = 0.5  # Narrower bars to reduce label overlap
    bars = plt.bar(data['Month'].astype(str), data['Inclusive Amount'], color='skyblue', alpha=0.8, width=bar_width)

    # Add labels on top of each bar with vertical padding
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width() / 2, yval + (yval * 0.01), f'R{yval:,.2f}',
                 ha='center', va='bottom', fontsize=9)

    plt.title(f'Monthly Totals for {allocation}')
    plt.xlabel('Month')
    plt.ylabel('Inclusive Amount (R)')
    plt.xticks(rotation=45)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()

    # Save the chart
    file_name = f'Monthly_Totals_for_{allocation}.png'
    plt.savefig(file_name, dpi=300)

    # Download the chart
    files.download(file_name)

    plt.show()

# Filter data for a single month (e.g., April 2024)
april_data = grouped_data[grouped_data['Month'] == '2024-04']

# Plot the pie chart
plt.figure(figsize=(8, 8))
plt.pie(april_data['Inclusive Amount'], labels=april_data['Allocation'], autopct='%1.1f%%', startangle=140, colors=plt.cm.tab10.colors)
plt.title('Allocation Contributions for April 2024')
plt.show()

import matplotlib.pyplot as plt

# Group data by Month and Allocation, summing up financial columns
grouped_data = df.groupby(['Month', 'Allocation'])[['Inclusive Amount']].sum().reset_index()

# Pivot data to create a table format suitable for a stacked bar chart
pivot_data = grouped_data.pivot(index='Month', columns='Allocation', values='Inclusive Amount').fillna(0)

# Plot the stacked bar chart
pivot_data.plot(kind='bar', stacked=True, figsize=(12, 8), cmap='tab10')
plt.title('Monthly Totals by Allocation')
plt.xlabel('Month')
plt.ylabel('Inclusive Amount (ZAR)')
plt.xticks(rotation=45)
plt.legend(title='Allocation', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""üõ† Future Improvements
- ‚úÖ Predictive modeling to forecast future expenses
- ‚úÖ Comparative cost analysis for different energy sources
- ‚úÖ Automated report generation for easier tracking

üë®‚Äçüíª About Me

üìå Created by Boniface ‚Äì First-time Data Analyst

üìç LinkedIn: www.linkedin.com/in/b-ramushU

üìç Email: dynamicdatamindset@gmail.com

üìç GitHub: https://github.com/DynamicDataMindset

This project marks my first step into data analytics, proving that with the right tools and curiosity, anyone can uncover meaningful insights from data! üöÄ

"""